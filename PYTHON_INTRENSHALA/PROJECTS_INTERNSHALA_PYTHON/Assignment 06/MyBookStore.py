# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MyBookStore.ui'
#
# Created by: PyQt5 UI code generator 5.12.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3

class Ui_MyBookStore(object):
    def setupUi(self, MyBookStore):
        MyBookStore.setObjectName("MyBookStore")
        MyBookStore.resize(440, 321)
        self.centralwidget = QtWidgets.QWidget(MyBookStore)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout.addWidget(self.comboBox)
        self.fd = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.fd.setFont(font)
        self.fd.setObjectName("fd")
        self.horizontalLayout.addWidget(self.fd)
        self.fd.clicked.connect(self.loadData)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.table = QtWidgets.QTableWidget(self.centralwidget)
        self.table.setRowCount(9)
        self.table.setColumnCount(4)
        self.table.setObjectName("table")
        item = QtWidgets.QTableWidgetItem()
        self.table.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setItem(0, 3, item)
        self.verticalLayout.addWidget(self.table)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.price = QtWidgets.QLineEdit(self.centralwidget)
        self.price.setEnabled(False)
        self.price.setObjectName("price")
        self.horizontalLayout_2.addWidget(self.price)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.quantity = QtWidgets.QLineEdit(self.centralwidget)
        self.quantity.setObjectName("quantity")
        self.horizontalLayout_3.addWidget(self.quantity)
        self.ft = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ft.setFont(font)
        self.ft.setObjectName("ft")
        self.horizontalLayout_3.addWidget(self.ft)
        self.ft.clicked.connect(self.findTotal)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.total = QtWidgets.QLineEdit(self.centralwidget)
        self.total.setEnabled(False)
        self.total.setObjectName("total")
        self.horizontalLayout_4.addWidget(self.total)
        self.re = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.re.setFont(font)
        self.re.setObjectName("re")
        self.horizontalLayout_4.addWidget(self.re)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        MyBookStore.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MyBookStore)
        self.statusbar.setObjectName("statusbar")
        MyBookStore.setStatusBar(self.statusbar)

        self.retranslateUi(MyBookStore)
        self.re.clicked.connect(self.comboBox.clear)
        self.re.clicked.connect(self.price.clear)
        self.re.clicked.connect(self.quantity.clear)
        self.re.clicked.connect(self.total.clear)
        self.re.clicked.connect(self.table.clear)
        QtCore.QMetaObject.connectSlotsByName(MyBookStore)

    def retranslateUi(self, MyBookStore):
        _translate = QtCore.QCoreApplication.translate
        MyBookStore.setWindowTitle(_translate("MyBookStore", "MainWindow"))
        self.comboBox.setItemText(0, _translate("MyBookStore", "AI"))
        self.comboBox.setItemText(1, _translate("MyBookStore", "C++"))
        self.comboBox.setItemText(2, _translate("MyBookStore", "C#"))
        self.comboBox.setItemText(3, _translate("MyBookStore", "CSS3"))
        self.comboBox.setItemText(4, _translate("MyBookStore", "HTML5"))
        self.comboBox.setItemText(5, _translate("MyBookStore", "Java"))
        self.comboBox.setItemText(6, _translate("MyBookStore", "Java Scripts"))
        self.comboBox.setItemText(7, _translate("MyBookStore", "PHP"))
        self.comboBox.setItemText(8, _translate("MyBookStore", "Think Python"))
        self.fd.setText(_translate("MyBookStore", "Find Details"))
        __sortingEnabled = self.table.isSortingEnabled()
        self.table.setSortingEnabled(False)
        item = self.table.item(0, 0)
        item.setText(_translate("MyBookStore", "Title"))
        item = self.table.item(0, 1)
        item.setText(_translate("MyBookStore", "Author"))
        item = self.table.item(0, 2)
        item.setText(_translate("MyBookStore", "Price"))
        item = self.table.item(0, 3)
        item.setText(_translate("MyBookStore", "Availability"))
        self.table.setSortingEnabled(__sortingEnabled)
        self.label.setText(_translate("MyBookStore", "Price"))
        self.label_2.setText(_translate("MyBookStore", "Quantity"))
        self.ft.setText(_translate("MyBookStore", "Find Total"))
        self.label_3.setText(_translate("MyBookStore", "Total"))
        self.re.setText(_translate("MyBookStore", "Reset"))

    def loadData(self):
        MyBook = sqlite3.connect('books.db')
        sql = "SELECT Title, Author, Price, Available from Books where Title == '{}';".format(self.comboBox.currentText())
        result = MyBook.execute(sql)
        self.table.setRowCount(2)
        for row_number, row_data in enumerate(result):
            self.table.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.table.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
        MyBook.close()
        self.findPrice()


    def findPrice(self):
        MyBook = sqlite3.connect('books.db')
        sql = "SELECT Price from Books where Title == '{}';".format(self.comboBox.currentText())
        curbuk = MyBook.cursor()
        curbuk.execute(sql)
        while True:
            result = curbuk.fetchone()
            if result == None:
                break
            self.price.setText("{}".format(int(result[0])))
        MyBook.close()

    def findTotal(self):
        Total = int(self.price.text()) * int(self.quantity.text())
        self.total.setText("{}".format(Total))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MyBookStore = QtWidgets.QMainWindow()
    ui = Ui_MyBookStore()
    ui.setupUi(MyBookStore)
    MyBookStore.show()
    sys.exit(app.exec_())
